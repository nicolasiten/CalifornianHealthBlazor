@page "/BookAppointment"
@using CalifornianHealth.Common.Exceptions
@using CalifornianHealth.Common.Models
@using CalifornianHealthBlazor.Helpers
@using CalifornianHealthBlazor.Interfaces
@inject IJSRuntime JsRuntime
@inject IAppointmentService AppointmentService
@inject NavigationManager NavigationManager

<section id="booking" class="section-padding">
    <h2 align="center">Book Appointment</h2>
    <hr />

    <div class="alert alert-danger" style="@(_validationErrors.Any() ? "" : "display: none")">
        <b>Invalid Input</b><br />
        @foreach (var error in _validationErrors)
        {
            @($"-{error}")<br />
        }
    </div>

    <div class="form-group">
        <label>Consultant</label>
        <select class="form-control" @onchange="SelectedConsultantChanged">
            <option selected disabled value="-1">--Choose Consultant--</option>
            @foreach (var consultant in _appointment.Consultants.OrderBy(c => c.Firstname).ThenBy(c => c.Lastname))
            {
                <option value="@consultant.Id">@consultant.Firstname @consultant.Lastname</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Patient</label>
        <select class="form-control" @bind="_appointment.SelectedPatientId">
            <option selected disabled value="0">--Choose Patient--</option>
            @foreach (var patient in _appointment.Patients.OrderBy(c => c.Firstname).ThenBy(c => c.Lastname))
            {
                <option value="@patient.Id">@patient.Firstname @patient.Lastname</option>
            }
        </select>
    </div>

    <div id="evoCalendar"></div>

    <div class="form-group">
        <button class="btn btn-submit" @onclick="SubmitClicked">Submit</button>
    </div>
</section>

@code {
    private AppointmentModel _appointment = new AppointmentModel();
    private List<string> _validationErrors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _appointment = await AppointmentService.BuildAppointmentModelAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BlazorHelpers.InitializeBlazorHelpers(JsRuntime, DotNetObjectReference.Create(this));
            await BlazorHelpers.RenderCalendar(JsRuntime, DotNetObjectReference.Create(this));

            await UpdateAvailableAppointments(DateTime.Today);
        }
    }

    private async Task SubmitClicked(MouseEventArgs e)
    {
        _validationErrors.Clear();

        _validationErrors.AddRange(AppointmentService.ValidateAppointment(_appointment));

        if (!_validationErrors.Any())
        {
            try
            {
                await AppointmentService.SaveAppointmentAsync(_appointment);
                NavigationManager.NavigateTo("/");
            }
            catch (CalifornianHealthException ex)
            {
                _validationErrors.Add(ex.Message);
                await UpdateAvailableAppointments(_appointment.SelectedDate);
            }
        }
    }

    private async Task SelectedConsultantChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int consultantId))
        {
            _appointment.SelectedConsultantId = consultantId;
            await UpdateAvailableAppointments(_appointment.SelectedDate);
        }
    }

    [JSInvokable]
    public async Task UpdateAvailableAppointments(DateTime date)
    {
        if (_appointment.SelectedConsultantId > 0)
        {
            string[] availableTimes = (await AppointmentService.GetFreeAppointmentTimesAsync(date, _appointment.SelectedConsultantId)).ToArray();
            await BlazorHelpers.UpdateAvailableAppointmentsInCalendar(JsRuntime, availableTimes);
        }
        else
        {
            await BlazorHelpers.UpdateAvailableAppointmentsInCalendar(JsRuntime, new string[0]);
        }

        _appointment.SelectedDate = date;
        _appointment.SelectedTime = string.Empty;
    }

    [JSInvokable]
    public void UpdateTime(string time)
    {
        _appointment.SelectedTime = time;
    }
}
